#include <iostream>
#include <string>

using std::string;
using std::cout;
using std::cin;

string generate_key(string word_to_change, string key_word);
string encrypt (string word_to_change, string key_word);
string decrypt (string cipher_word, string key_word);

int main()
{
	string str;
	string key_word;

	cout << "Enter word you want to encrypt: ";
	cin >> str;
	cout << "Enter key word: ";
	cin >> key_word;

	string key = generate_key (str, key_word);
	string cipher_text = encrypt (str, key);

	cout << "Cipher text : "
		<< cipher_text << "\n";

	cout << "Original/Decrypted text : "
		<< decrypt (cipher_text, key);

	return 0;
}

// This function generates the key in a cyclic manner until it's length isn't equal to the length of original text
string generate_key (string word_to_change, string key_word)
{
	int x = word_to_change.size();

	for (int i = 0; ; i++)
	{
		if (x == i)
			i = 0;
		if (key_word.size() == word_to_change.size())
			break;
		key_word.push_back(key_word[i]);
	}
	return key_word;
}

// This function returns the encrypted text generated with the help of the key
string encrypt (string word_to_change, string key_word)
{
	string cipher_word;

	for (int i = 0; i < word_to_change.size(); i++)
	{
		// converting in range 0-25
		char x = (word_to_change[i] + key_word[i]) % 26;

		// convert into alphabets(ASCII)
		x += 'A';

		cipher_word.push_back(x);
	}
	return cipher_word;
}

// This function decrypts the encrypted text and returns the original text
string decrypt (string cipher_word, string key_word)
{
	string original_word;

	for (int i = 0; i < cipher_word.size(); i++)
	{
		// converting in range 0-25
		char x = (cipher_word[i] - key_word[i] + 26) % 26;

		// convert into alphabets(ASCII)
		x += 'A';
		original_word.push_back(x);
	}
	return original_word;
}


	
